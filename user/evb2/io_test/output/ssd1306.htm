<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ssd1306.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ssd1306.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 30 17:18:00 2021
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SSD1306_I2C_init &rArr; I2C_init &rArr; I2C_MasterConfig &rArr; I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">n00_WDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">n00_WDG_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from hardfaulthandler.o(.emb_text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[1b]">Reset_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from as32m0_systick.o(i.SysTick_Handler) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[19]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_as32m0.o(.text)
 <LI><a href="#[1a]">fputc</a> from retarget.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[18]">hardfault_handler_c</a> from hardfaulthandler.o(i.hardfault_handler_c) referenced from hardfaulthandler.o(.emb_text)
 <LI><a href="#[17]">main</a> from ssd1306.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6]">n00_WDG_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[7]">n01_DMA_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[8]">n02_ADC_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[9]">n03_LVD_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[a]">n04_PWM0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[b]">n05_PWM1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[c]">n06_PWM2_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[d]">n07_PWM3_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[e]">n08_UART0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[f]">n09_UART1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[10]">n10_TMR0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[11]">n11_TMR1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[12]">n12_TMR2_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[13]">n13_I2C_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[14]">n14_SPI_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[15]">n15_GIO_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[16]">n16_flash_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardfaulthandler.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>n00_WDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n00_WDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n00_WDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>n01_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>n02_ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>n03_LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>n04_PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>n05_PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>n06_PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>n07_PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>n08_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>n09_UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>n10_TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>n11_TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>n12_TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>n13_I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>n14_SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>n15_GIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>n16_flash_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>

<P><STRONG><a name="[1f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
</UL>

<P><STRONG><a name="[21]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
</UL>

<P><STRONG><a name="[22]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[70]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[72]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[20]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[1d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[74]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>I2CWirteBytes</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, as32m0_i2c.o(i.I2CWirteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2CWirteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>

<P><STRONG><a name="[2b]"></a>I2C_DISABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as32m0_i2c.o(i.I2C_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[31]"></a>I2C_ENABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as32m0_i2c.o(i.I2C_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[2a]"></a>I2C_MasterConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, as32m0_i2c.o(i.I2C_MasterConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2C_MasterConfig &rArr; I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransFifoSet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargerAdd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceFifoSet
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ENABLE
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[30]"></a>I2C_ReceFifoSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, as32m0_i2c.o(i.I2C_ReceFifoSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ReceFifoSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[2e]"></a>I2C_SCL_HCNT</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, as32m0_i2c.o(i.I2C_SCL_HCNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C_SCL_HCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[2d]"></a>I2C_SCL_LCNT</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, as32m0_i2c.o(i.I2C_SCL_LCNT))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[2c]"></a>I2C_TargerAdd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, as32m0_i2c.o(i.I2C_TargerAdd))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[2f]"></a>I2C_TransFifoSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, as32m0_i2c.o(i.I2C_TransFifoSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_TransFifoSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>

<P><STRONG><a name="[34]"></a>I2C_init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, as32m0_i2c.o(i.I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C_init &rArr; I2C_MasterConfig &rArr; I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCtrl_GIOSet
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_I2C_init
</UL>

<P><STRONG><a name="[35]"></a>PinCtrl_GIOSet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, as32m0_pinctrl.o(i.PinCtrl_GIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PinCtrl_GIOSet
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[36]"></a>SER_PutChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf_config.o(i.SER_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SER_PutChar &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[38]"></a>SSD1306_Dim</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_Dim))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_Dim &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>SSD1306_Display</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_Display &rArr; ssd1306_data &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>SSD1306_DisplayOnOFF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_DisplayOnOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD1306_DisplayOnOFF &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>SSD1306_DisplayRotate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_DisplayRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD1306_DisplayRotate &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>SSD1306_DrawChar</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ssd1306oled.o(i.SSD1306_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SSD1306_DrawChar &rArr; SSD1306_Print &rArr; SSD1306_FillRect &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_TextSize
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Print
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>SSD1306_DrawCircle</STRONG> (Thumb, 264 bytes, Stack size 44 bytes, ssd1306oled.o(i.SSD1306_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SSD1306_DrawCircle &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SSD1306_DrawFastHLine</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ssd1306oled.o(i.SSD1306_DrawFastHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSD1306_DrawFastHLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawRect
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SSD1306_DrawFastVLine</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ssd1306oled.o(i.SSD1306_DrawFastVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillCircleHelper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillRect
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillCircle
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawRect
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>SSD1306_DrawLine</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, ssd1306oled.o(i.SSD1306_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastHLine
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SSD1306_DrawPixel</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSD1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Print
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawLine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawCircle
</UL>

<P><STRONG><a name="[47]"></a>SSD1306_DrawRect</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ssd1306oled.o(i.SSD1306_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SSD1306_DrawRect &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>SSD1306_DrawText</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, ssd1306oled.o(i.SSD1306_DrawText))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SSD1306_DrawText &rArr; SSD1306_Print &rArr; SSD1306_FillRect &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_TextSize
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Print
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>SSD1306_FillCircle</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, ssd1306oled.o(i.SSD1306_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SSD1306_FillCircle &rArr; SSD1306_FillCircleHelper &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillCircleHelper
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>SSD1306_FillCircleHelper</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, ssd1306oled.o(i.SSD1306_FillCircleHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SSD1306_FillCircleHelper &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillCircle
</UL>

<P><STRONG><a name="[4b]"></a>SSD1306_FillRect</STRONG> (Thumb, 36 bytes, Stack size 36 bytes, ssd1306oled.o(i.SSD1306_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SSD1306_FillRect &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Print
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>SSD1306_GotoXY</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssd1306oled.o(i.SSD1306_GotoXY))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawText
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawChar
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>SSD1306_I2C_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SSD1306_I2C_init &rArr; I2C_init &rArr; I2C_MasterConfig &rArr; I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>SSD1306_InvertDisplay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_InvertDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD1306_InvertDisplay &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>SSD1306_OLED_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_OLED_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD1306_OLED_init &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>SSD1306_Print</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, ssd1306oled.o(i.SSD1306_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SSD1306_Print &rArr; SSD1306_FillRect &rArr; SSD1306_DrawFastVLine &rArr; SSD1306_DrawLine &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawPixel
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawText
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawChar
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>SSD1306_StartScrollDiagLeft</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_StartScrollDiagLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_StartScrollDiagLeft &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>SSD1306_StartScrollDiagRight</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_StartScrollDiagRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_StartScrollDiagRight &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>SSD1306_StartScrollLeft</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_StartScrollLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_StartScrollLeft &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SSD1306_StartScrollRight</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssd1306oled.o(i.SSD1306_StartScrollRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_StartScrollRight &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>SSD1306_StopScroll</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ssd1306oled.o(i.SSD1306_StopScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD1306_StopScroll &rArr; ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_command
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>SSD1306_TextSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssd1306oled.o(i.SSD1306_TextSize))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawText
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawChar
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>SYSCTRL_ClrReset_APB_PinCtrl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_sysctrl.o(i.SYSCTRL_ClrReset_APB_PinCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[5f]"></a>SYSCTRL_ClrReset_APB_SCI0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_sysctrl.o(i.SYSCTRL_ClrReset_APB_SCI0))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as32m0_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_as32m0.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[67]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, as32m0_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[54]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[32]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransFifoSet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_LCNT
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SCL_HCNT
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceFifoSet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_beep
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler_c
</UL>

<P><STRONG><a name="[27]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[79]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[56]"></a>apPWM_Config</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, as32m0_pwm.o(i.apPWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apPWM_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Int_Enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Check_CMD_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_beep
</UL>

<P><STRONG><a name="[59]"></a>apPWM_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_pwm.o(i.apPWM_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Config
</UL>

<P><STRONG><a name="[58]"></a>apPWM_Int_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_pwm.o(i.apPWM_Int_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Config
</UL>

<P><STRONG><a name="[5a]"></a>apUART_BaudRateSet</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, as32m0_uart.o(i.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[65]"></a>apUART_Check_BUSY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_BUSY))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[66]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_TXFIFO_FULL))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[5c]"></a>apUART_Initialize</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, as32m0_uart.o(i.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[5e]"></a>config_uart0</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, printf_config.o(i.config_uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = config_uart0 &rArr; apUART_Initialize &rArr; apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCtrl_GIOSet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClrReset_APB_SCI0
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClrReset_APB_PinCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_misc.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_s
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[61]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, as32m0_misc.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>delay_s</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, as32m0_misc.o(i.delay_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_s
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; SER_PutChar &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[18]"></a>hardfault_handler_c</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hardfaulthandler.o(i.hardfault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hardfault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfaulthandler.o(.emb_text)
</UL>
<P><STRONG><a name="[64]"></a>init_beep</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, ssd1306.o(i.init_beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_beep &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Config
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>main</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, ssd1306.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; SSD1306_I2C_init &rArr; I2C_init &rArr; I2C_MasterConfig &rArr; I2C_SCL_LCNT &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_TextSize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StopScroll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollRight
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollLeft
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollDiagRight
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollDiagLeft
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Print
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_OLED_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_InvertDisplay
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_I2C_init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_GotoXY
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillRect
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_FillCircle
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawText
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawRect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawLine
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastVLine
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawFastHLine
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawCircle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawChar
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DisplayRotate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DisplayOnOFF
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Display
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Dim
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_beep
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_s
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[37]"></a>sendchar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, printf_config.o(i.sendchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>apPWM_Check_CMD_Busy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, as32m0_pwm.o(i.apPWM_Check_CMD_Busy))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apPWM_Config
</UL>

<P><STRONG><a name="[39]"></a>ssd1306_command</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssd1306oled.o(i.ssd1306_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_command &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWirteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StopScroll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollRight
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollLeft
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollDiagRight
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_StartScrollDiagLeft
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_OLED_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_InvertDisplay
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DisplayRotate
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DisplayOnOFF
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Display
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Dim
</UL>

<P><STRONG><a name="[3b]"></a>ssd1306_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssd1306oled.o(i.ssd1306_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ssd1306_data &rArr; I2CWirteBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWirteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Display
</UL>

<P><STRONG><a name="[55]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
