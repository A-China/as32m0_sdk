<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\FPGA_MP3_player.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\FPGA_MP3_player.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 03 16:49:15 2020
<BR><P>
<H3>Maximum Stack Usage =       2128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; puf_encrypt_decrypt_file &rArr; del_puf_sector &rArr; Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">n00_WDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">n00_WDG_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from hardfaulthandler.o(.emb_text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[1f]">Reset_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from as32m0_systick.o(i.SysTick_Handler) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[1b]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[19]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_as32m0.o(.text)
 <LI><a href="#[1c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1a]">fgetc</a> from retarget.o(i.fgetc) referenced from scanf_char_file.o(.text)
 <LI><a href="#[1e]">fputc</a> from retarget.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[18]">hardfault_handler_c</a> from hardfaulthandler.o(i.hardfault_handler_c) referenced from hardfaulthandler.o(.emb_text)
 <LI><a href="#[1d]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[17]">main</a> from fpga_mp3_player.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[6]">n00_WDG_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[7]">n01_DMA_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[8]">n02_ADC_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[9]">n03_LVD_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[a]">n04_PWM0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[b]">n05_PWM1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[c]">n06_PWM2_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[d]">n07_PWM3_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[e]">n08_UART0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[f]">n09_UART1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[10]">n10_TMR0_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[11]">n11_TMR1_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[12]">n12_TMR2_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[13]">n13_I2C_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[14]">n14_SPI_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[15]">n15_GIO_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
 <LI><a href="#[16]">n16_flash_IRQHandler</a> from startup_as32m0.o(.text) referenced from startup_as32m0.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[19]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[97]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[98]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[99]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[9b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardfaulthandler.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_MCU007
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>n00_WDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n00_WDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;n00_WDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>n01_DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>n02_ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>n03_LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>n04_PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>n05_PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>n06_PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>n07_PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>n08_UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>n09_UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>n10_TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>n11_TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>n12_TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>n13_I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>n14_SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>n15_GIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>n16_flash_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_as32m0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf8_to_buf64
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf64_to_buf8
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_file
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_directory
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[26]"></a>__0scanf</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_chosen_file_ptr
</UL>

<P><STRONG><a name="[28]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[27]"></a>__vfscanf_char_file</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_fgetc$bs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[a6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>isspace</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, isspace_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[a7]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__ctype_lookup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[20]"></a>initial_MCU007</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, initial_mcu007.o(INITIAL_CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[53]"></a>DMA_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_512byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[50]"></a>DMA_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_512byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[76]"></a>DMA_Enable_Sync</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_Enable_Sync))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma_spi
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_spi_dma
</UL>

<P><STRONG><a name="[52]"></a>DMA_GetActiveChannels</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_GetActiveChannels))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_32byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[75]"></a>DMA_LittleEndian</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_LittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma_spi
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_spi_dma
</UL>

<P><STRONG><a name="[37]"></a>DMA_SetChConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_SetChConfig))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
</UL>

<P><STRONG><a name="[36]"></a>DMA_SetChControl</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_SetChControl))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
</UL>

<P><STRONG><a name="[35]"></a>DMA_SetChLLI</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, as32m0_dma.o(i.DMA_SetChLLI))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
</UL>

<P><STRONG><a name="[34]"></a>DMA_SetChannelReg</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, as32m0_dma.o(i.DMA_SetChannelReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA_SetChannelReg
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChLLI
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChControl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_32byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[7d]"></a>File_Check_Sector</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fpga_mp3_player.o(i.File_Check_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>PinCtrl_GIOSet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, as32m0_pinctrl.o(i.PinCtrl_GIOSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PinCtrl_GIOSet
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SPI
</UL>

<P><STRONG><a name="[38]"></a>Read_puf_key</STRONG> (Thumb, 232 bytes, Stack size 232 bytes, as32m0_des.o(i.Read_puf_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Write_Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Read_Data
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_write_reg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_set_bits
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_read_reg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
</UL>

<P><STRONG><a name="[40]"></a>SD_printf_datamap</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, test_sd_card.o(i.SD_printf_datamap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_printf_datamap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>SD_spi_command</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, test_sd_card.o(i.SD_spi_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_spi_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceReceiveClear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7_mmc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_PowerUp
</UL>

<P><STRONG><a name="[49]"></a>SD_spi_getdata</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_sd_card.o(i.SD_spi_getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_spi_getdata
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ReadFIFO
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[4d]"></a>SD_spi_read_command</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, test_sd_card.o(i.SD_spi_read_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SD_spi_read_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceReceiveClear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7_mmc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[4e]"></a>SD_spi_read_single_blk</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, test_sd_card.o(i.SD_spi_read_single_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SD_spi_read_single_blk &rArr; SD_spi_read_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetActiveChannels
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceReceiveClear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAModeSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAAddressGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file_list
</UL>

<P><STRONG><a name="[54]"></a>SD_spi_send_byte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, test_sd_card.o(i.SD_spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ReadFIFO
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_PowerUp
</UL>

<P><STRONG><a name="[55]"></a>SD_spi_write_single_blk</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, test_sd_card.o(i.SD_spi_write_single_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SD_spi_write_single_blk &rArr; SD_spi_read_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetActiveChannels
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceReceiveClear
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAModeSet
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAAddressGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[56]"></a>SER_GetChar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, printf_config.o(i.SER_GetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SER_GetChar
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SER_PutChar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf_config.o(i.SER_PutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SER_PutChar &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[69]"></a>SYSCTRL_ClrReset_APB_PinCtrl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_sysctrl.o(i.SYSCTRL_ClrReset_APB_PinCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[68]"></a>SYSCTRL_ClrReset_APB_SCI0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_sysctrl.o(i.SYSCTRL_ClrReset_APB_SCI0))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as32m0_systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_as32m0.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART_ReceData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_uart.o(i.UART_ReceData))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
</UL>

<P><STRONG><a name="[91]"></a>UART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, as32m0_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[5a]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[41]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Write_Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Read_Data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Encrypt_Decrypt_Data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_file_list
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_chosen_file_ptr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VS10xx
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_parttition_table
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_directory
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_FAT32
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_printf_datamap
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_feature
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file_list
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler_c
</UL>

<P><STRONG><a name="[4a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, as32m0_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5c]"></a>add_puf_sector</STRONG> (Thumb, 558 bytes, Stack size 152 bytes, test_puf_sd.o(i.add_puf_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = add_puf_sector &rArr; Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf8
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[5e]"></a>apDes_Config</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, as32m0_des.o(i.apDes_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apDes_Config &rArr; apDes_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Enable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_write_reg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_decrypt
</UL>

<P><STRONG><a name="[3b]"></a>apDes_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, as32m0_des.o(i.apDes_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apDes_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_set_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
</UL>

<P><STRONG><a name="[5f]"></a>apDes_Encrypt_Decrypt_Data</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, as32m0_des.o(i.apDes_Encrypt_Decrypt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = apDes_Encrypt_Decrypt_Data &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Write_Data
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Read_Data
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_decrypt
</UL>

<P><STRONG><a name="[3f]"></a>apDes_Read_Data</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, as32m0_des.o(i.apDes_Read_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_read_reg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_check_output_ready
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Encrypt_Decrypt_Data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
</UL>

<P><STRONG><a name="[3d]"></a>apDes_Write_Data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, as32m0_des.o(i.apDes_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = apDes_Write_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_write_reg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_check_input_ready
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Encrypt_Decrypt_Data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
</UL>

<P><STRONG><a name="[51]"></a>apSSP_DMAAddressGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DMAAddressGet))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_32byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[4f]"></a>apSSP_DMAModeSet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DMAModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_512byte_dma
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[46]"></a>apSSP_DeviceBusyGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DeviceBusyGet))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_getdata
</UL>

<P><STRONG><a name="[47]"></a>apSSP_DeviceDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DeviceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_getdata
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[45]"></a>apSSP_DeviceEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DeviceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_getdata
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[95]"></a>apSSP_DeviceParametersSet</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_DeviceParametersSet))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssp_config
</UL>

<P><STRONG><a name="[48]"></a>apSSP_DeviceReceiveClear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, as32m0_ssp.o(i.apSSP_DeviceReceiveClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apSSP_DeviceReceiveClear
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
</UL>

<P><STRONG><a name="[94]"></a>apSSP_Initialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssp_config
</UL>

<P><STRONG><a name="[4c]"></a>apSSP_ReadFIFO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_ssp.o(i.apSSP_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_getdata
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_getdata
</UL>

<P><STRONG><a name="[62]"></a>apUART_BaudRateSet</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, as32m0_uart.o(i.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[4b]"></a>apUART_Check_BUSY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_BUSY))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>apUART_Check_RXFIFO_EMPTY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_RXFIFO_EMPTY))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[90]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_uart.o(i.apUART_Check_TXFIFO_FULL))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[63]"></a>apUART_Initialize</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, as32m0_uart.o(i.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
</UL>

<P><STRONG><a name="[8e]"></a>audio_delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vs10xx.o(i.audio_delay))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
</UL>

<P><STRONG><a name="[65]"></a>buf64_to_buf8</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, test_puf_sd.o(i.buf64_to_buf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buf64_to_buf8 &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[66]"></a>buf8_to_buf64</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, test_puf_sd.o(i.buf8_to_buf64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buf8_to_buf64 &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[5d]"></a>clear_buf8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_puf_sd.o(i.clear_buf8))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
</UL>

<P><STRONG><a name="[67]"></a>config_uart0</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, printf_config.o(i.config_uart0))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = config_uart0 &rArr; apUART_Initialize &rArr; apUART_BaudRateSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCtrl_GIOSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClrReset_APB_SCI0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClrReset_APB_PinCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>crc7_mmc</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, test_sd_card.o(i.crc7_mmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc7_mmc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
</UL>

<P><STRONG><a name="[6b]"></a>create_file_list</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, fpga_mp3_player.o(i.create_file_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = create_file_list &rArr; file_extract_directory &rArr; file_extract_file
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_directory
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>del_puf_sector</STRONG> (Thumb, 586 bytes, Stack size 160 bytes, test_puf_sd.o(i.del_puf_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = del_puf_sector &rArr; Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf8
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[43]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_sd_card.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_command
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_PowerUp
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>encrypt_file_list</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test_puf_sd.o(i.encrypt_file_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = encrypt_file_list
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fgetc &rArr; SER_PutChar &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>file_extract_FAT32</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, test_file_system.o(i.file_extract_FAT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = file_extract_FAT32 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>file_extract_checkfile</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, test_file_system.o(i.file_extract_checkfile))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_directory
</UL>

<P><STRONG><a name="[6c]"></a>file_extract_directory</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, test_file_system.o(i.file_extract_directory))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = file_extract_directory &rArr; file_extract_file
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_file
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_checkfile
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file_list
</UL>

<P><STRONG><a name="[70]"></a>file_extract_file</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, test_file_system.o(i.file_extract_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = file_extract_file
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_directory
</UL>

<P><STRONG><a name="[72]"></a>file_extract_parttition_table</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, test_file_system.o(i.file_extract_parttition_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = file_extract_parttition_table &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; SER_PutChar &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[18]"></a>hardfault_handler_c</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hardfaulthandler.o(i.hardfault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hardfault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfaulthandler.o(.emb_text)
</UL>
<P><STRONG><a name="[73]"></a>init_SD_card_PowerUp</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, test_sd_card.o(i.init_SD_card_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_SD_card_PowerUp &rArr; SD_spi_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_send_byte
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_command
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>init_SD_card_spi_dma</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, test_sd_card.o(i.init_SD_card_spi_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_SD_card_spi_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LittleEndian
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>init_SPI</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fpga_mp3_player.o(i.init_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_SPI &rArr; ssp_config
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCtrl_GIOSet
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssp_config
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>init_VS10xx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, vs10xx.o(i.init_VS10xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_VS10xx &rArr; reset &rArr; softReset &rArr; readRegister &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>init_dma_spi</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, vs10xx.o(i.init_dma_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_dma_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_LittleEndian
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable_Sync
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>main</STRONG> (Thumb, 786 bytes, Stack size 1096 bytes, fpga_mp3_player.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = main &rArr; puf_encrypt_decrypt_file &rArr; del_puf_sector &rArr; Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_chosen_file_ptr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_file_list
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_func
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_file_list
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dma_spi
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VS10xx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_spi_dma
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SD_card_PowerUp
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_parttition_table
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_extract_FAT32
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt_file_list
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart0
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_printf_datamap
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_feature
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SPI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_file_list
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Check_Sector
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_RXFIFO_EMPTY
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_BUSY
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7f]"></a>music_file_list</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, test_puf_sd.o(i.music_file_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = music_file_list
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>music_player_func</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, music_player.o(i.music_player_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = music_player_func &rArr; music_player_playfile &rArr; SD_spi_read_single_blk &rArr; SD_spi_read_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>music_player_playfile</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, music_player.o(i.music_player_playfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = music_player_playfile &rArr; SD_spi_read_single_blk &rArr; SD_spi_read_command &rArr; crc7_mmc
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_GetChar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_func
</UL>

<P><STRONG><a name="[7e]"></a>printf_feature</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fpga_mp3_player.o(i.printf_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printf_feature &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>puf_decrypt</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, test_puf_sd.o(i.puf_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = puf_decrypt &rArr; apDes_Encrypt_Decrypt_Data &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Encrypt_Decrypt_Data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[8a]"></a>puf_encrypt</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, test_puf_sd.o(i.puf_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = puf_encrypt &rArr; apDes_Encrypt_Decrypt_Data &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Encrypt_Decrypt_Data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt_decrypt_file
</UL>

<P><STRONG><a name="[83]"></a>puf_encrypt_decrypt_file</STRONG> (Thumb, 424 bytes, Stack size 592 bytes, test_puf_sd.o(i.puf_encrypt_decrypt_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = puf_encrypt_decrypt_file &rArr; del_puf_sector &rArr; Read_puf_key &rArr; apDes_Read_Data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_write_single_blk
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_encrypt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puf_decrypt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_puf_sector
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf8_to_buf64
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf64_to_buf8
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_puf_sector
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_spi_read_single_blk
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>puf_file_list</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, test_puf_sd.o(i.puf_file_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puf_file_list
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>readRegister</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vs10xx.o(i.readRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readRegister &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_getdata
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
</UL>

<P><STRONG><a name="[7a]"></a>reset</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, vs10xx.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reset &rArr; softReset &rArr; readRegister &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_delay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VS10xx
</UL>

<P><STRONG><a name="[80]"></a>return_chosen_file_ptr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, test_file_system.o(i.return_chosen_file_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = return_chosen_file_ptr &rArr; __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_file_list
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>sendchar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, printf_config.o(i.sendchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[8f]"></a>show_file_list</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, test_file_system.o(i.show_file_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = show_file_list &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_chosen_file_ptr
</UL>

<P><STRONG><a name="[86]"></a>softReset</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, vs10xx.o(i.softReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softReset &rArr; readRegister &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
</UL>

<P><STRONG><a name="[8d]"></a>spi_getdata</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vs10xx.o(i.spi_getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_getdata
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ReadFIFO
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
</UL>

<P><STRONG><a name="[92]"></a>spi_send_32byte_dma</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vs10xx.o(i.spi_send_32byte_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spi_send_32byte_dma &rArr; DMA_SetChannelReg
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetActiveChannels
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAAddressGet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_512byte_dma
</UL>

<P><STRONG><a name="[93]"></a>spi_send_512byte_dma</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vs10xx.o(i.spi_send_512byte_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_send_512byte_dma &rArr; spi_send_32byte_dma &rArr; DMA_SetChannelReg
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Disable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DMAModeSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_32byte_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeData
</UL>

<P><STRONG><a name="[8c]"></a>spi_send_byte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vs10xx.o(i.spi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_ReadFIFO
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceBusyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
</UL>

<P><STRONG><a name="[88]"></a>writeData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vs10xx.o(i.writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = writeData &rArr; spi_send_512byte_dma &rArr; spi_send_32byte_dma &rArr; DMA_SetChannelReg
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceDisable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_512byte_dma
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
</UL>

<P><STRONG><a name="[87]"></a>writeRegister</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vs10xx.o(i.writeRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeRegister &rArr; spi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softReset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_player_playfile
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>des_check_input_ready</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, as32m0_des.o(i.des_check_input_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = des_check_input_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Write_Data
</UL>

<P><STRONG><a name="[60]"></a>des_check_output_ready</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, as32m0_des.o(i.des_check_output_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = des_check_output_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Read_Data
</UL>

<P><STRONG><a name="[3c]"></a>des_read_reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, as32m0_des.o(i.des_read_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Read_Data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_check_output_ready
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;des_check_input_ready
</UL>

<P><STRONG><a name="[3a]"></a>des_set_bits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, as32m0_des.o(i.des_set_bits))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
</UL>

<P><STRONG><a name="[39]"></a>des_write_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, as32m0_des.o(i.des_write_reg))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Write_Data
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apDes_Config
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_puf_key
</UL>

<P><STRONG><a name="[78]"></a>ssp_config</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fpga_mp3_player.o(i.ssp_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssp_config
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_Initialize
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apSSP_DeviceParametersSet
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SPI
</UL>

<P><STRONG><a name="[5b]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[1c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[31]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[33]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
